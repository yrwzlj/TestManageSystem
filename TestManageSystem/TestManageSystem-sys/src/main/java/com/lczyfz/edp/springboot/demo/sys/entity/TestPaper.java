package com.lczyfz.edp.springboot.demo.sys.entity;

import com.baomidou.mybatisplus.annotation.TableName;
import com.lczyfz.edp.springboot.core.config.Global;
import com.lczyfz.edp.springboot.core.entity.DataEntity;
import com.lczyfz.edp.springboot.core.utils.SnowFlakeIdUtils;
import io.swagger.annotations.ApiModel;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

@Data
@AllArgsConstructor
@NoArgsConstructor
@ApiModel(value = "TestPaper", description = "TestPaper")
@TableName(value = "ds_test_paper")
public class TestPaper extends DataEntity<TestPaper> {

    /**
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column ds_test_paper.name
     *
     * @mbg.generated
     */
    private String name;

    /**
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column ds_test_paper.test_time
     *
     * @mbg.generated
     */
    private Integer testTime;

    private String officeId;

    @Override
    public void preInsert() {
        if (!this.isNewRecord) {
            this.setId(SnowFlakeIdUtils.getIdWorker(Global.WORKER_ID, Global.DATA_CENTER_ID).nextId() + "");
        }

        LocalDateTime localDateTime = LocalDateTime.now();
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH-mm-ss");

        this.updateDate = new Date();
        try {
            this.createDate = new SimpleDateFormat("dd-MM-yyyy HH-mm-ss").parse(localDateTime.format(dateTimeFormatter));
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void preUpdate() {
        this.updateDate = new Date();
    }

}